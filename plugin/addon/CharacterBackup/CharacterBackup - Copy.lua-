-- Ensure the saved variable table exists (add this in .toc as SavedVariables: CharacterBackupData)
CharacterBackupData = CharacterBackupData or {}

------------------------------------------------------------------
-- 1) Extra Data: Inventory, Skills, Spells, Talents, Glyphs, etc.
------------------------------------------------------------------

-- Get equipped inventory items
local function GetInventoryData()
    local inventory = {}
    for slot = 1, 19 do
        local itemLink = GetInventoryItemLink("player", slot)
        if itemLink then
            inventory[slot] = itemLink
        end
    end
    return inventory
end

-- Get bag items
local function GetBagItems()
    local bags = {}
    for bag = 0, 4 do -- Bags 0 to 4 (Backpack + 4 additional bags)
        bags[bag] = {}
        for slot = 1, GetContainerNumSlots(bag) do
            local itemLink = GetContainerItemLink(bag, slot)
            if itemLink then
                local _, itemCount = GetContainerItemInfo(bag, slot)
                table.insert(bags[bag], { item = itemLink, count = itemCount or 1 })
            end
        end
    end
    return bags
end

-- Get skill levels
local function GetSkillData()
    local skills = {}
    for i = 1, GetNumSkillLines() do
        local skillName, _, _, skillRank = GetSkillLineInfo(i)
        if skillName then
            skills[skillName] = skillRank
        end
    end
    return skills
end

-- Get player's money (gold, silver, copper)
local function GetMoneyData()
    local totalCopper = GetMoney()
    local gold   = math.floor(totalCopper / 10000)
    local silver = math.floor((totalCopper % 10000) / 100)
    local copper = totalCopper % 100
    return { gold = gold, silver = silver, copper = copper }
end

-- Get all learned skills/spells from the spellbook
local function GetLearnedSkills()
    local learnedSkills = {}
    for i = 1, MAX_SKILLLINE_TABS do
        local tabName, _, offset, numSpells = GetSpellTabInfo(i)
        if not tabName then break end -- Stop if we run out of tabs

        for j = 1, numSpells do
            local spellIndex = offset + j
            local spellName, spellRank = GetSpellName(spellIndex, BOOKTYPE_SPELL)
            if spellName then
                learnedSkills[spellName] = spellRank or "Passive"
            end
        end
    end
    return learnedSkills
end

-- Get all mounts known to the player
local function GetMountData()
    local mounts = {}
    local numMounts = GetNumCompanions("MOUNT")
    for i = 1, numMounts do
        local creatureID, creatureName, creatureSpellID, icon, isSummoned = GetCompanionInfo("MOUNT", i)
        table.insert(mounts, {
            id       = creatureID,
            name     = creatureName,
            spellID  = creatureSpellID,
            icon     = icon,
            summoned = isSummoned,
        })
    end
    return mounts
end

-- Get all pets (non-combat companions) known to the player
local function GetPetData()
    local pets = {}
    local numPets = GetNumCompanions("CRITTER")
    for i = 1, numPets do
        local creatureID, creatureName, creatureSpellID, icon, isSummoned = GetCompanionInfo("CRITTER", i)
        table.insert(pets, {
            id       = creatureID,
            name     = creatureName,
            spellID  = creatureSpellID,
            icon     = icon,
            summoned = isSummoned,
        })
    end
    return pets
end

-- Get talents
local function GetTalentData()
    local talents = {}
    local numTabs = GetNumTalentTabs()
    for tabIndex = 1, numTabs do
        local tabName, tabIcon, tabPointsSpent = GetTalentTabInfo(tabIndex)
        local tabInfo = {
            name = tabName or ("Tab"..tabIndex),
            icon = tabIcon,
            pointsSpent = tabPointsSpent or 0,
            talents = {}
        }
        local numTalents = GetNumTalents(tabIndex)
        for talentIndex = 1, numTalents do
            local name, icon, tier, column, currentRank, maxRank = GetTalentInfo(tabIndex, talentIndex)
            if name then
                tabInfo.talents[name] = {
                    icon   = icon,
                    tier   = tier,
                    column = column,
                    rank   = currentRank,
                    max    = maxRank,
                }
            end
        end
        talents[tabIndex] = tabInfo
    end
    return talents
end

-- Get glyphs (up to 6 in WotLK)
local function GetGlyphData()
    local glyphs = {}
    for i = 1, 6 do
        local enabled, glyphType, glyphSpellID, icon = GetGlyphSocketInfo(i)
        glyphs[i] = {
            enabled     = enabled,
            glyphType   = glyphType, -- "major"/"minor"
            glyphSpellID= glyphSpellID,
            icon        = icon,
        }
    end
    return glyphs
end

------------------------------------------------------------------
-- 2) Achievements & Reputations
------------------------------------------------------------------

-- Get Achievements by naive ID loop
local function GetAchievementData()
    local achievements = {}
    -- In Wrath, there are roughly 4-5k achievements max; let's loop a bit generously
    for achID = 1, 6000 do
        local name, description, points, completed, month, day, year, _, icon, rewardText = GetAchievementInfo(achID)
        if name then
            achievements[achID] = {
                name        = name,
                points      = points,
                completed   = completed,   -- boolean
                date        = (month and day and year and completed) and string.format("%02d/%02d/%d", month, day, year) or nil,
                icon        = icon,
                rewardText  = rewardText,
            }
        end
    end
    return achievements
end

-- Get Reputations
local function GetReputationData()
    local reputations = {}
    local numFactions = GetNumFactions()
    for i = 1, numFactions do
        local name, description, standingID, bottomValue, topValue, earnedValue, atWarWith, canToggleAtWar, isHeader, isCollapsed, hasRep, isWatched, isChild = GetFactionInfo(i)
        if name and not isHeader then
            reputations[name] = {
                standingID  = standingID,    -- numeric rank (1=Hated,...,8=Exalted)
                current     = earnedValue,   -- current rep points in this standing level
                minimum     = bottomValue,   -- min rep points at this level
                maximum     = topValue,      -- max rep points at this level
            }
        end
    end
    return reputations
end

------------------------------------------------------------------
-- 3) SaveData() to Collect Everything
------------------------------------------------------------------

local function SaveData()
    -- Items, Skills, Spells
    CharacterBackupData.inventory       = GetInventoryData()
    CharacterBackupData.bagItems        = GetBagItems()
    CharacterBackupData.skills          = GetSkillData()
    CharacterBackupData.money           = GetMoneyData()
    CharacterBackupData.learnedSkills   = GetLearnedSkills()
    CharacterBackupData.mounts          = GetMountData()
    CharacterBackupData.pets            = GetPetData()

    -- Talents & Glyphs
    CharacterBackupData.talents = GetTalentData()
    CharacterBackupData.glyphs  = GetGlyphData()

    -- Achievements & Reputations
    CharacterBackupData.achievements = GetAchievementData()
    CharacterBackupData.reputations  = GetReputationData()

    print("CharacterBackup: Saved inventory, bags, skills, money, spells, mounts, pets, talents, glyphs, achievements, and reputations!")
end

------------------------------------------------------------------
-- 4) Overriding Header Logic for In-Progress Quests
------------------------------------------------------------------

local function ShouldStoreQuest(title, isHeader, questIDTitle, questIDLink)
    if not title or title == "" then return false end
    -- If the quest link or Title ID is valid, treat it as a quest
    if (questIDLink and questIDLink > 0) or (questIDTitle and questIDTitle > 0) then
        return true
    end
    return not isHeader
end

------------------------------------------------------------------
-- 5) Debug Function (Optional)
------------------------------------------------------------------

local function DebugQuestLogSlot(index, info)
    print(string.format(
        "[DebugQuest] Slot=%d Title='%s' isHeader=%s questIDTitle=%s questIDLink=%s",
        index,
        tostring(info.title),
        tostring(info.isHeader),
        tostring(info.questIDTitle),
        tostring(info.questIDLink)
    ))
end

------------------------------------------------------------------
-- 6) Main Frame: Quests
------------------------------------------------------------------

local frame = CreateFrame("Frame")
frame:RegisterEvent("ADDON_LOADED")
frame:RegisterEvent("PLAYER_LOGOUT")
frame:RegisterEvent("QUEST_QUERY_COMPLETE")
frame:RegisterEvent("QUEST_LOG_UPDATE")
frame:RegisterEvent("PLAYER_ENTERING_WORLD")

frame:SetScript("OnEvent", function(self, event, arg1)
    if event == "ADDON_LOADED" and arg1 == "CharacterBackup" then
        CharacterBackupData = CharacterBackupData or {}
        CharacterBackupData.quests          = CharacterBackupData.quests or {}
        CharacterBackupData.inProgressQuests= CharacterBackupData.inProgressQuests or {}

    elseif event == "QUEST_QUERY_COMPLETE" then
        local completedQuests = {}
        GetQuestsCompleted(completedQuests)
        for qid, _ in pairs(completedQuests) do
            CharacterBackupData.quests[qid] = true
        end

        local count = 0
        for _ in pairs(CharacterBackupData.quests) do count = count + 1 end
        print("CharacterBackup: Backed up " .. count .. " completed quests.")

    elseif event == "QUEST_LOG_UPDATE" or event == "PLAYER_ENTERING_WORLD" then
        CharacterBackupData.inProgressQuests = {}
        local numEntries = GetNumQuestLogEntries()
        print("[DebugQuest] Scanning quest log with " .. numEntries .. " entries.")

        for i = 1, numEntries do
            local title, _, _, isHeader, _, _, _, questIDTitle = GetQuestLogTitle(i)
            local questLink = GetQuestLink(i)
            local questIDLink = questLink and tonumber(string.match(questLink, "quest:(%d+):"))

            local info = {
                title       = title or "nil",
                isHeader    = isHeader and "true" or "false",
                questIDTitle= questIDTitle or "nil",
                questIDLink = questIDLink or "nil",
            }
            DebugQuestLogSlot(i, info)

            if ShouldStoreQuest(title, isHeader, questIDTitle, questIDLink) then
                local usedID
                if questIDTitle and questIDTitle > 0 then
                    usedID = questIDTitle
                elseif questIDLink and questIDLink > 0 then
                    usedID = questIDLink
                else
                    usedID = "UnknownID_"..i
                end
                CharacterBackupData.inProgressQuests[usedID] = title
            end
        end

        local inProgressCount = 0
        for _ in pairs(CharacterBackupData.inProgressQuests) do inProgressCount = inProgressCount + 1 end
        print("CharacterBackup: Backed up " .. inProgressCount .. " in-progress quests.")
        CharacterBackupData.lastUpdated = time()

    elseif event == "PLAYER_LOGOUT" then
        print("CharacterBackup: Saving completed and in-progress quests on logout.")
    end
end)

------------------------------------------------------------------
-- 7) Slash Command: /backup
------------------------------------------------------------------

SLASH_CHARACTERBACKUP1 = "/backup"
SlashCmdList["CHARACTERBACKUP"] = function()
    -- Query completed quests
    QueryQuestsCompleted()
    print("CharacterBackup: Querying completed quest data from server...")

    -- Re-scan in-progress quests
    local numEntries = GetNumQuestLogEntries()
    print("[DebugQuest] /backup scanning " .. numEntries .. " entries for in-progress quests.")
    CharacterBackupData.inProgressQuests = {}

    for i = 1, numEntries do
        local title, _, _, isHeader, _, _, _, questIDTitle = GetQuestLogTitle(i)
        local questLink = GetQuestLink(i)
        local questIDLink = questLink and tonumber(string.match(questLink, "quest:(%d+):"))

        local info = {
            title       = title or "nil",
            isHeader    = isHeader and "true" or "false",
            questIDTitle= questIDTitle or "nil",
            questIDLink = questIDLink or "nil",
        }
        DebugQuestLogSlot(i, info)

        if ShouldStoreQuest(title, isHeader, questIDTitle, questIDLink) then
            local usedID
            if questIDTitle and questIDTitle > 0 then
                usedID = questIDTitle
            elseif questIDLink and questIDLink > 0 then
                usedID = questIDLink
            else
                usedID = "UnknownID_"..i
            end
            CharacterBackupData.inProgressQuests[usedID] = title
        end
    end

    local inProgressCount = 0
    for _ in pairs(CharacterBackupData.inProgressQuests) do inProgressCount = inProgressCount + 1 end
    print("CharacterBackup: Backed up " .. inProgressCount .. " in-progress quests.")

    -- Finally, save all extra data (inventory, mounts, talents, glyphs, achievements, reputations, etc.)
    SaveData()
end
